import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

def connect_db():
    conn = sqlite3.connect('database.db')
    return conn

def setup_db():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_type TEXT NOT NULL,
            name TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            gender TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            codigo TEXT UNIQUE NOT NULL,
            nome TEXT NOT NULL,
            categoria TEXT NOT NULL,
            preco REAL NOT NULL,
            quantidade INTEGER NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

def login(user_type_client, name, password):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM users WHERE user_type=? AND name=? AND password=?
    ''', (user_type_client, name, password))
    user = cursor.fetchone()
    conn.close()

    if user:
        return True, f"Bem-vindo, {user[2]}!"
    else:
        return False, "Usuário ou senha inválidos."

def save_registration_usuario(name, genero, password):
    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO users (user_type, name, password, gender)
            VALUES (?, ?, ?, ?)
        ''', ('funcionario', name, password, genero))
        conn.commit()
        return True, "Cadastro realizado com sucesso"
    except sqlite3.IntegrityError:
        return False, "Usuário já cadastrado"
    finally:
        conn.close()

def load_products():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products')
    products = cursor.fetchall()
    conn.close()
    return products

def save_product(codigo, nome, categoria, preco, quantidade):
    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO products (codigo, nome, categoria, preco, quantidade)
            VALUES (?, ?, ?, ?, ?)
        ''', (codigo, nome, categoria, preco, quantidade))
        conn.commit()
        return True, "Produto adicionado com sucesso!"
    except sqlite3.IntegrityError:
        return False, "Código de produto já existe."
    finally:
        conn.close()

def update_product(codigo, nome, categoria, preco, quantidade):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE products
        SET nome=?, categoria=?, preco=?, quantidade=?
        WHERE codigo=?
    ''', (nome, categoria, preco, quantidade, codigo))
    conn.commit()
    conn.close()

def delete_product(codigo):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM products WHERE codigo=?', (codigo,))
    conn.commit()
    conn.close()

class InventoryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gerenciamento de Produtos")
        self.logged_in = False
        self.setup_ui()

    def setup_ui(self):
        self.login_frame = tk.Frame(self.root)
        self.login_frame.pack(padx=10, pady=10)

        tk.Label(self.login_frame, text="Nome").grid(row=0, column=0, padx=5, pady=5)
        self.name_entry = tk.Entry(self.login_frame)
        self.name_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(self.login_frame, text="Senha").grid(row=1, column=0, padx=5, pady=5)
        self.password_entry = tk.Entry(self.login_frame, show='*')
        self.password_entry.grid(row=1, column=1, padx=5, pady=5)

        self.login_button = tk.Button(self.login_frame, text="Login", command=self.login)
        self.login_button.grid(row=2, column=0, padx=5, pady=5)

        self.register_button = tk.Button(self.login_frame, text="Cadastrar Funcionários", command=self.register_window)
        self.register_button.grid(row=2, column=1, padx=5, pady=5)

        self.view_stock_button = tk.Button(self.login_frame, text="Ver Estoque", command=self.storage_view)
        self.view_stock_button.grid(row=2, column=2, padx=5, pady=5)

        self.login_frame.pack()

    def login(self):
        user_type_client = "funcionario"
        name = self.name_entry.get().strip()
        password = self.password_entry.get().strip()
        success, message = login(user_type_client, name, password)
        messagebox.showinfo("Login", message)
        if success:
            self.logged_in = True
            self.login_frame.pack_forget()

    def register_window(self):
        register_window = tk.Toplevel(self.root)
        register_window.title("Cadastro de Funcionário")

        tk.Label(register_window, text="Nome").grid(row=0, column=0, padx=5, pady=5)
        name_entry = tk.Entry(register_window)
        name_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(register_window, text="Gênero").grid(row=1, column=0, padx=5, pady=5)
        gender_entry = ttk.Combobox(register_window, values=['Masculino', 'Feminino'])
        gender_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(register_window, text="Senha").grid(row=2, column=0, padx=5, pady=5)
        password_entry = tk.Entry(register_window, show='*')
        password_entry.grid(row=2, column=1, padx=5, pady=5)

        tk.Button(register_window, text="Registrar", command=lambda: self.register(name_entry.get().strip(), gender_entry.get(), password_entry.get().strip(), register_window)).grid(row=3, column=0, padx=5, pady=5)
        tk.Button(register_window, text="Cancelar", command=register_window.destroy).grid(row=3, column=1, padx=5, pady=5)

    def register(self, name, gender, password, window):
        if not name or not gender or not password:
            messagebox.showerror("Erro", "Todos os campos devem ser preenchidos.")
            return

        success, message = save_registration_usuario(name, gender, password)
        messagebox.showinfo("Registro", message)
        if success:
            window.destroy()

    def storage_view(self):
        if not self.logged_in:
            messagebox.showerror("Erro", "Você precisa estar logado para acessar o estoque.")
            return

        products = load_products()

        view_stock_window = tk.Toplevel(self.root)
        view_stock_window.title("Visualizar Estoque")

        for i, product in enumerate(products):
            tk.Label(view_stock_window, text=f"{product[1]} - {product[2]} - {product[3]} - R${product[4]:.2f} - {product[5]} em estoque").grid(row=i, column=0, padx=5, pady=5)

        tk.Button(view_stock_window, text="Adicionar Produto", command=self.add_product).grid(row=len(products), column=0, padx=5, pady=5)
        tk.Button(view_stock_window, text="Editar Produto", command=self.edit_product).grid(row=len(products), column=1, padx=5, pady=5)
        tk.Button(view_stock_window, text="Remover Produto", command=self.remove_product).grid(row=len(products), column=2, padx=5, pady=5)

    def add_product(self):
        add_product_window = tk.Toplevel(self.root)
        add_product_window.title("Adicionar Produto")

        tk.Label(add_product_window, text="Código").grid(row=0, column=0, padx=5, pady=5)
        code_entry = tk.Entry(add_product_window)
        code_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(add_product_window, text="Nome").grid(row=1, column=0, padx=5, pady=5)
        name_entry = tk.Entry(add_product_window)
        name_entry.grid(row=1, column=1, padx=5, pady=5)

        tk.Label(add_product_window, text="Categoria").grid(row=2, column=0, padx=5, pady=5)
        category_entry = tk.Entry(add_product_window)
        category_entry.grid(row=2, column=1, padx=5, pady=5)

        tk.Label(add_product_window, text="Preço").grid(row=3, column=0, padx=5, pady=5)
        price_entry = tk.Entry(add_product_window)
        price_entry.grid(row=3, column=1, padx=5, pady=5)

        tk.Label(add_product_window, text="Quantidade").grid(row=4, column=0, padx=5, pady=5)
        quantity_entry = tk.Entry(add_product_window)
        quantity_entry.grid(row=4, column=1, padx=5, pady=5)

        tk.Button(add_product_window, text="Adicionar", command=lambda: self.save_product_action(code_entry.get().strip(), name_entry.get().strip(), category_entry.get().strip(), price_entry.get().strip(), quantity_entry.get().strip(), add_product_window)).grid(row=5, column=0, padx=5, pady=5)
        tk.Button(add_product_window, text="Cancelar", command=add_product_window.destroy).grid(row=5, column=1, padx=5, pady=5)
    
    def save_product_action(self, codigo, nome, categoria, preco, quantidade, window):
        try:
            preco = float(preco)
            quantidade = int(quantidade)
            success, message = save_product(codigo, nome, categoria, preco, quantidade)
            messagebox.showinfo("Resultado", message)
            if success:
                window.destroy()
        except ValueError:
            messagebox.showerror("Erro", "Preço e Quantidade devem ser numéricos.")

if __name__ == "__main__":
    setup_db()
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()
